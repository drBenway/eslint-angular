// prevent controllers form doing stuff that they should delegate
// for example $http should be handled by a service

module.exports = function (context) {
    "use strict";
    function report(node, name1) {
        context.report(node, "this controller function uses a restricted dependency {{param}}.", {
            param: name1
        });
    }

    var restrictedParams = context.options[0] || [];// options given in index.js
    var controllername = '';
    return {
        'CallExpression': function (node) {
            var callee = node.callee;
            if (callee.type === 'MemberExpression' && callee.property.name === 'controller') {
                controllername = node.arguments[1].name;
            }
        },
        'FunctionDeclaration': function (node) {
            var id = node.id && node.id.name;
            if (id === controllername && node.params) {
                var params = node.params.map(
                    function (param) {
                        return param.name;
                    }
                );
                restrictedParams.filter(function (n) {
                    if (params.indexOf(n) != -1) {
                        report(node, n);
                    }
                });
            }
        }


    };


};